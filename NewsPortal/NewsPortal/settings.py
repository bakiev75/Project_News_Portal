"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from datetime import datetime
from pathlib import Path

from django.conf.global_settings import LOGGING, LANGUAGES
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wcg7k*l1aw15dm=*oph*!#j&_xvppn*nh!)xqo(ho@5xfha!-c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = (
    'modeltranslation',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',

)

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'news.my_middleware.TimezoneMiddleware',
]

ROOT_URLCONF = 'NewsPortal.urls'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru'

LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]


LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

load_dotenv()

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

APSCHEDULER_RUN_NOW_TIMEOUT = 25

SITE_URL = 'http://127.0.0.1:8000'

# Добавление настроек Redis

CELERY_BROKER_URL = 'redis://:gQ66sDXqRrO3Vvnx4QeU4nvoGjoDTJ2h@redis-14686.c135.eu-central-1-1.ec2.cloud.redislabs.com:14686'
CELERY_RESULT_BACKEND = 'redis://:gQ66sDXqRrO3Vvnx4QeU4nvoGjoDTJ2h@redis-14686.c135.eu-central-1-1.ec2.cloud.redislabs.com:14686'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'my_verbose_1': {
            'format': '{asctime} {levelname} {message}',    # Время, уровень сообщения, сообщение
            'style': '{',
        },
        'my_verbose_2': {
            'format': '{asctime} {levelname} {message} {pathname}',    # Время, уровень сообщения, сообщение + путь
            'style': '{',
        },
        'my_verbose_3': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',  # Время, уровень сообщения, сообщение
            'style': '{',                                                       # + путь + стэк
        },
        'for_file_general': {
            'format': '{asctime} {levelname} {module} {message}',        # В файл general
            'style': '{',                                                # время, уровень сообщения, модуль, сообщение
        },
        'for_file_errors': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',      # В файл errors.log
            'style': '{',
        },
        'for_file_security': {
            'format': '{asctime} {levelname} {module} {message}',        # время, уровень сообщения, модуль, сообщение
            'style': '{',
        },
        'for_mail_admin': {
            'format': '{asctime} {levelname} {message} {pathname}',        # время, уровень сообщения, модуль, сообщение
            'style': '{',
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },


    'handlers': {
        'console_1': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'my_verbose_1'
        },
        'console_2': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'my_verbose_2'
        },
        'console_3': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'my_verbose_3'
        },
        'console_4': {
            'level': 'CRITICAL',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'my_verbose_3'
        },
        'for_file_general': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'for_file_general'
        },
        'for_file_errors': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'for_file_errors'
        },
        'for_file_security': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'for_file_security'
        },
        'for_mail_admin': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'for_mail_admin',
            'filters': ['require_debug_false']
        },
    },

    'loggers': {
        'django': {                             # Логгер для п.1 задания D16.4
            'handlers': [# 'console_1',         # сообщения с основного логгера django, уровня DEBUG, и выше, т.е. всё
                         'console_2',           # (console_1 отключил для следующих модулей, что бы терминал освободить)
                         'console_3',
                         'console_4',           # направляются в Хандлеры, в которых обрабатываются по п.1 для Консоли
                         'for_file_general'],   # + по п.2 задания используется для файла general.log
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['for_file_errors',
                         'for_mail_admin'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['for_file_errors',
                         'for_mail_admin'],
            'level': 'DEBUG',
            'propagate': False,
        },

        'django.template': {
            'handlers': ['for_file_errors'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['for_file_errors'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['for_file_security'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}
