from django.db import models


# Модель Author
# Модель, содержащая объекты всех авторов.
# Имеет следующие поля:
# - связь "один к одному" с встроенной моделью пользователей User;
# - рейтинг пользователя (FloatField).
# Метод upgrade_rating() , который обновляет рейтинг пользователя, переданный в аргумент этого метода:
#   Метод состоит из следующего:
#   - суммарный рейтинг каждой статьи автора умножается на 3;
#   - суммарный рейтинг всех комментариев АВТОРА;
#   - суммарный рейтинг всех комментариев к статьям автора.


class Author(models.Model):                                                         # Модель 1
    raiting_author = models.FloatField(default=0.0)
    # поле связи "один к одному" с встроенной моделью пользователей User;
    # Метод upgrade_rating()


# Модель Category
# Категории новостей/статей - темы, которые они отражают (спорт, политика, образование и т.д.)
# Имеет единственное поле: название категории. Поле должно быть уникальным
# (в определении поля необходимо написать параметр unique = True)


class Category(models.Model):                                                       # Модель 2
    category = models.CharField(max_length=255, unique=True)


# Модель Post
# Эта модель должна содержать в себе статьи и новости, которые создают пользователи.
# Каждый объект может иметь одну, или несколько категорий.
# Модель должна включать поля:
# - поле с выбором - "статья" или "новость"
# - заголовок "статьи" или "новости"
# - текст "статьи" или "новости"
# - автоматически добавляемая дата и время создания
# - рейтинг "статьи" или "новости"
# - связь "один ко многим" с моделью Author
# - связь "многие ко многим" с моделью Category (с дополнительной моделью PostCategory)
#
# Методы
# - like() увеличивает рейтинг на единицу
# - dislike() уменьшает рейтинг на единицу
# - preview() возвращает начало статьи длиной 124 символа и добавляет многоточие в конце


class Post(models.Model):                                                           # Модель 3
    article_or_new = models.BooleanField(default=1)             # 1 - статья; 0 - новость
    title = models.CharField(max_length=255)                    # Заголовок статьи или новости
    text_body = models.TextField(default='No text')             # Текст статьи или новости
    date_time_post = models.DateTimeField(auto_now_add=True)         # Дата и время СОЗДАНИЯ записи
    raiting_article_or_new = models.FloatField(default=0.0)     # Рейтинг статьи или новости
    # - связь "один ко многим" с моделью Author
    # - связь "многие ко многим" с моделью Category (с дополнительной моделью PostCategory)
    #   Методы
    # - like() увеличивает рейтинг на единицу
    # - dislike() уменьшает рейтинг на единицу
    # - preview() возвращает начало статьи длиной 124 символа и добавляет многоточие в конце


# Модель PostCategory
# Промежуточная модель для связи "многие ко многим"
# - связь "один ко многим" с моделью Post
# - связь "один ко многим" с моделью Category


class PostCategory(models.Model):                                                   # Модель 4
    # - связь "один ко многим" с моделью Post
    # - связь "один ко многим" с моделью Category
    pass


# Модель Comment
# Под каждой статьёй/новостью можно оставлять комментарии, поэтому необходимо организовать их способ хранения тоже.
# Модель будет иметь следующие поля:
# - текст комментария
# - дата и время СОЗДАНИЯ комментария
# - рейтинг комментария
# - связь "один ко многим" с моделью Post
# - связь "один ко многим" со встроенной моделью User (комментарии может оставить любой пользователь, не только Author)
#
#   Методы
# - like() увеличивает рейтинг на единицу
# - dislike() уменьшает рейтинг на единицу


class Comment(models.Model):                                                        # Модель 5
    text_comment = models.TextField(default='No comment')       # Текст комментария
    date_time_comment = models.DateTimeField(auto_now_add=True) # Дата и время СОЗДАНИЯ комментария
    rating_comment = models.FloatField(default=0.0)             # Рейтинг комментария
    # - связь "один ко многим" с моделью Post
    # - связь "один ко многим" со встроенной моделью User (комментарии может оставить любой пользователь, не только Author)
    #   Методы
    # - like() увеличивает рейтинг на единицу
    # - dislike() уменьшает рейтинг на единицу


# Create your models here.
